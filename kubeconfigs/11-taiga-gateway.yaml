---
apiVersion: v1
kind: ConfigMap
metadata:
  name: taiga-gateway-config
  namespace: pbs-taiga
data:
  default.conf: |
    server {
      listen [::]:80 default_server;
      listen 80 default_server;

      client_max_body_size 100M;
      charset utf-8;

      location /healthz {
          return 200 'OK';
      }

      # Static
      location /static/ {
          alias /taiga/static/;
      }

      # Media
      location /_protected/ {
          internal;
          alias /taiga/media/;
          add_header Content-disposition "attachment";
      }

      # Unprotected section
      location /media/exports/ {
          alias /taiga/media/exports/;
          add_header Content-disposition "attachment";
      }

      location /media/ {
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_pass http://taiga-protected:8003/;
          proxy_redirect off;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: taiga-gateway
  namespace: pbs-taiga
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taiga-gateway
  template:
    metadata:
      labels:
        app: taiga-gateway
    spec:
      nodeSelector:
        kaas.infomaniak.cloud/instance-pool: pck-8kxhclv-pvy
      affinity:
        podAffinity: # We need to schedule this on the same node as taiga-back because of shared volumes
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - taiga-back
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: taiga-gateway
          image: nginx:1.29-alpine@sha256:42a516af16b852e33b7682d5ef8acbd5d13fe08fecadc7ed98605ba5e3b26ab8
          ports:
            - containerPort: 80
          volumeMounts:
            - name: taiga-gateway-config
              mountPath: /etc/nginx/conf.d/
              readOnly: true
            - name: taiga-static
              mountPath: /taiga/static
            - name: taiga-media
              mountPath: /taiga/media
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
          startupProbe:
            httpGet:
              path: /healthz
              port: 80
            periodSeconds: 1
            failureThreshold: 60
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
      volumes:
        - name: taiga-gateway-config
          configMap:
            name: taiga-gateway-config
        - name: taiga-static
          persistentVolumeClaim:
            claimName: taiga-static
        - name: taiga-media
          persistentVolumeClaim:
            claimName: taiga-media
---
apiVersion: v1
kind: Service
metadata:
  name: taiga-gateway
  namespace: pbs-taiga
spec:
  selector:
    app: taiga-gateway
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: taiga-gateway
  namespace: pbs-taiga
spec:
  rules:
    - host: taiga.scout.ch
      http:
        paths:
          - pathType: Prefix
            path: "/static"
            backend:
              service:
                name: taiga-gateway
                port:
                  number: 80
          - pathType: Prefix
            path: "/media"
            backend:
              service:
                name: taiga-gateway
                port:
                  number: 80
